// Generated by CoffeeScript 1.3.3
(function() {
  var context, contextClass;

  contextClass = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext || window.msAudioContext;

  if (contextClass) {
    context = new contextClass();
  }

  $(function() {
    var Envelope, OSC, createVoice, impulse, ip, ip10, ip11, ip12, ip13, ip14, ip15, ip2, ip3, ip4, ip5, ip6, ip7, ip8, ip9, noteToFrequency, parseIp;
    ip = window.sampleIP;
    ip2 = "50.201.141.30";
    ip3 = "53.20.121.50";
    ip4 = "153.120.213.250";
    ip5 = "40.140.127.2";
    ip6 = "140.127.2.40";
    ip7 = "127.2.40.140";
    ip8 = "2.40.140.127";
    ip9 = "172.16.1.20";
    ip10 = "16.1.20.172";
    ip11 = "1.20.172.16";
    ip12 = "20.172.16.1";
    ip13 = "172.16.1.20";
    ip14 = "16.1.20.172";
    ip15 = "1.20.172.16";
    context = new contextClass();
    OSC = (function() {

      function OSC(type, freq, gain) {
        if (gain == null) {
          gain = 0.25;
        }
        this.osc = context.createOscillator();
        this.gain = context.createGain();
        this.osc.type = type;
        this.osc.frequency.value = freq;
        this.gain.gain.value = gain;
        this.osc.gain = this.gain;
        this.osc.connect(this.gain);
        this.osc.start(0);
      }

      return OSC;

    })();
    Envelope = (function() {

      function Envelope() {
        this.node = context.createGain();
        this.node.gain.value = 0;
        this.node;
      }

      Envelope.prototype.addEventToQueue = function(tempo, peak) {
        peak |= 1;
        this.node.gain.linearRampToValueAtTime(0, context.currentTime);
        this.node.gain.linearRampToValueAtTime(peak, context.currentTime + 0.009);
        this.node.gain.linearRampToValueAtTime(peak / 3, context.currentTime + 0.05);
        return this.node.gain.linearRampToValueAtTime(0, context.currentTime + (tempo / 2000));
      };

      return Envelope;

    })();
    noteToFrequency = function(note) {
      if (note > noteFrequencies.length) {
        note = note - noteFrequencies.length - 1;
      }
      return noteFrequencies[note];
    };
    parseIp = function(ip) {
      return ip.split('.').map(function(i) {
        return parseInt(i);
      });
    };
    impulse = function(env, amEnv, fmEnv, tempo) {
      env.addEventToQueue(tempo);
      amEnv.addEventToQueue(tempo / 2, 2);
      return fmEnv.addEventToQueue(tempo / 2, 4);
    };
    createVoice = function(ipParts) {
      var HEIGHT, WIDTH, am, amEnv, angle, carrier, centerX, centerY, env, fm, fmEnv, panner, scaleFactor, tempo, x, y, z;
      carrier = new OSC("sine", noteToFrequency(ipParts[0]));
      fm = new OSC("sine", noteToFrequency(ipParts[1]), 50);
      am = new OSC("sine", noteToFrequency(ipParts[2]), 0.125);
      tempo = ((ipParts[3] / 255) * 19000) + 1000;
      env = new Envelope();
      amEnv = new Envelope();
      am.gain.connect(amEnv.node);
      amEnv.node.connect(carrier.osc.gain.gain);
      fmEnv = new Envelope();
      fm.gain.connect(fmEnv.node);
      fmEnv.node.connect(carrier.osc.frequency);
      carrier.gain.connect(env.node);
      panner = context.createPanner();
      WIDTH = 5;
      HEIGHT = 5;
      centerX = WIDTH / 2;
      centerY = HEIGHT / 2;
      x = (Math.random() * 10 - centerX) / WIDTH;
      y = (Math.random() * 10 - centerY) / HEIGHT;
      z = -0.5;
      scaleFactor = 2;
      panner.setPosition(x * scaleFactor, y * scaleFactor, z);
      angle = Math.random() * 360;
      panner.setOrientation(Math.cos(angle), -Math.sin(angle), 1);
      env.node.connect(panner);
      panner.connect(context.destination);
      impulse(env, amEnv, fmEnv, tempo);
      return setInterval(function() {
        return impulse(env, amEnv, fmEnv, tempo);
      }, tempo);
    };
    createVoice(parseIp(ip));
    createVoice(parseIp(ip2));
    createVoice(parseIp(ip3));
    createVoice(parseIp(ip4));
    createVoice(parseIp(ip5));
    createVoice(parseIp(ip6));
    createVoice(parseIp(ip7));
    createVoice(parseIp(ip8));
    createVoice(parseIp(ip9));
    createVoice(parseIp(ip10));
    createVoice(parseIp(ip11));
    createVoice(parseIp(ip12));
    createVoice(parseIp(ip13));
    createVoice(parseIp(ip14));
    createVoice(parseIp(ip15));
    return context.listener.setPosition(0, 0, 0);
  });

}).call(this);
